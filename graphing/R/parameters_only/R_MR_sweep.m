function R_MR_sweep(SP)

    %% define sweep parameters
    sw_p.SH_radius_range = 0.2;
    sw_p.radius_ratio_range = 0.05;
    sw_p.angle_range = 1;
    
    sw_p.SH_radius_n_points = 5;
    sw_p.radius_ratio_n_points = 5;
    sw_p.angle_n_points = 5;
    
    %% create sweep arrays
    sw.SH_radius = ...
        linspace(...
            SP.R.RA.SH_radius - sw_p.SH_radius_range, ...
            SP.R.RA.SH_radius + sw_p.SH_radius_range, ...
            sw_p.SH_radius_n_points);
    sw.length_ratio = ...
        linspace(...
            SP.R.RA.SH_radius / SP.R.RA.PR_radius ...
            - sw_p.radius_ratio_range, ...
            SP.R.RA.SH_radius / SP.R.RA.PR_radius ...
            + sw_p.radius_ratio_range, ...
            sw_p.radius_ratio_n_points);
    sw.angle = ...
        linspace(...
            SP.R.RA.angle - sw_p.angle_range, ...
            SP.R.RA.angle + sw_p.angle_range, ...
            sw_p.angle_n_points);
 
    %% launch a figure, annotate, maximize
    figure(...
        'Name', 'Rear MR Sweeps', ...
        'NumberTitle', 'off', ...
        'Color', 'white', ...
        'WindowState', 'maximized');
    title_string = ...
        sprintf(...
            "Red = %.4g°, Yellow = %.4g°, Green = %.4g°, Blue = %.4g°, Purple = %.4g°", ...
            sw.angle(1), ...
            sw.angle(2), ...
            sw.angle(3), ...
            sw.angle(4), ...
            sw.angle(5));
    sgtitle(title_string);
    
    %% make copy
    SP_temp = SP.copy;
    
    %% run sweep and plot results
    min_MR = inf;
    max_MR = 0;
    MR_arrays = ...
        cell( ...
            sw_p.SH_radius_n_points, ...
            sw_p.radius_ratio_n_points, ...
            sw_p.angle_n_points);
    for i = 1:sw_p.SH_radius_n_points
        for j = 1:sw_p.radius_ratio_n_points
            subplot(...
                sw_p.SH_radius_n_points, ...
                sw_p.radius_ratio_n_points, ...
                (i - 1) * sw_p.SH_radius_n_points + j);
            hold on;
            grid on;
            for k = 1:sw_p.angle_n_points
                SP_temp.R.RA.SH_radius = sw.SH_radius(i);
                SP_temp.R.RA.PR_radius = ...
                    sw.SH_radius(i) / sw.length_ratio(j);
                SP_temp.R.RA.angle = sw.angle(k);
                SP_temp = SP_temp.R_AC_geometry;
                
                MR_arrays{i, j, k} = SP_temp.R.SY.MR_array;
                
                max_MR_candidate = max(MR_arrays{i, j, k});
                min_MR_candidate = min(MR_arrays{i, j, k});
                if max_MR_candidate > max_MR
                    max_MR = max_MR_candidate;
                end
                if min_MR_candidate < min_MR
                    min_MR = min_MR_candidate;
                end
    
                plot(...
                    SP_temp.R.SY.jounce_array * 1000, ...
                    MR_arrays{i, j, k}, ...
                    'Color', ...
                    hsv2rgb([(k - 1) / sw_p.angle_n_points, 1, 0.8]), ...
                    'DisplayName', ...
                    ['angle = ', num2str(sw.angle(k))]);
            end
            xlabel("wheel travel (mm)");
            ylabel("motion ratio");
            title(...
                ['SH length = ', num2str(sw.SH_radius(i)), ...
                ', ratio = ', num2str(sw.length_ratio(j))]);
            hold off;
        end
    end
    
    %% set axes consisently
    for i = 1:sw_p.SH_radius_n_points
        for j = 1:sw_p.radius_ratio_n_points
            subplot(...
                sw_p.SH_radius_n_points, ...
                sw_p.radius_ratio_n_points, ...
                (i - 1) * sw_p.SH_radius_n_points + j);
            axis([SP_temp.R.SY.jounce_array(1) * 1000, ...
                  SP_temp.R.SY.jounce_array(end) * 1000, ...
                  min_MR - 0.02, ...
                  max_MR + 0.02]);
            axis([-40, 40, 0.8, 1.2])
        end
    end
    
end