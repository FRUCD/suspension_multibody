function log_obj = simout_post_process(log_obj)
    %% find member names
    names = string(properties(log_obj));
    
    %% filter out only those members that obey name conventions
    data_match = ~cellfun(...
        @isempty, ...
        regexp(...
            names, ...
            "[A-Z]{1,2}_[A-Z]{2}_"));
    data_names = names(data_match);
    
    %% generate new variable names for structures
    new_names = regexprep( ...
        data_names, ...
        "([A-Z]{1,2})_([A-Z]{2})_(.*)", ...
        "$1.$2.$3");
    
    %% generate structure names for preallocation
    L1_names = regexprep(new_names, "^([A-Z]{1,2})(.*)", "$1");
    L2_names = regexprep(new_names, "^([A-Z]{1,2}\.[A-Z]{2})(.*)", "$1");
    L1_names = unique(L1_names);
    L2_names = unique(L2_names);
    
    %% write data processing commands
    create_L1 = strcat( ...
        "log_obj.", ...
        L1_names, ...
        " = struct;");
    create_L2 = strcat( ...
        "log_obj.", ...
        L2_names, ...
        " = struct;");
    copy_data = strcat(...
        "log_obj.", ...
        new_names, ...
        " = ", ...
        "log_obj.", ...
        data_names, ...
        ";");
    remove_old = strcat(...
        "log_obj = log_obj.removeProperty(""", ...
        data_names, ...
        """);");
    
    %% convert to cell arrays
    create_L1 = cellstr(create_L1);
    create_L2 = cellstr(create_L2);
    copy_data = cellstr(copy_data);
    remove_old = cellstr(remove_old);
    
    %% run data processing commands
    cellfun(@eval, create_L1);
    cellfun(@eval, create_L2);
    cellfun(@eval, copy_data);
    cellfun(@eval, remove_old);
    
end